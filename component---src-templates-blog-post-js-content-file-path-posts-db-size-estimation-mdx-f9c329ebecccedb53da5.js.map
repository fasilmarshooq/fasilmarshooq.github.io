{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-posts-db-size-estimation-mdx-f9c329ebecccedb53da5.js","mappings":"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","sources":["webpack://gatsby-starter-default/./posts/db-size-estimation.mdx","webpack://gatsby-starter-default/./src/templates/blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Ever been in the hot seat when a DBA asks, \\\"What's your DB size going to be in a year?\\\" üòé\"), \"\\n\", React.createElement(_components.p, null, \"At Agoda, we traditionally relied on SQL Server for our app. But let's face it, SQL Server can be a pricey beast. So, we decided to embrace the happy elephant, PostgreSQL. Why? That's a story for another day.\"), \"\\n\", React.createElement(_components.p, null, \"I was tasked with designing a highly scalable, event-driven booking search system. To give you a sense of scale, Agoda processes a few hundred bookings daily (let's assume 200k üòé)‚Äîwhich means a few bookings every second!\"), \"\\n\", React.createElement(_components.p, null, \"Since PostgreSQL was new to our platform, our cautious DBA team didn't want to risk it with a mission-critical service exceeding 300 GB. The burning question: Will my service exceed this limit?\"), \"\\n\", React.createElement(_components.p, null, \"The expectation was to have at least two years' worth of historical booking data ready at launch.\"), \"\\n\", React.createElement(_components.h2, null, \"The ChatGPT Consultation\"), \"\\n\", React.createElement(_components.p, null, \"Like any newbie, I turned to ChatGPT and asked:\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"\\\"If my PostgreSQL DB hosts a single table with a max of ten columns, one row per booking, and we get around 200k bookings per day, what's the data size for 2 years?\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ChatGPT's short answer: Yes, it will exceed 300 GB, with each row being 1KB. Yikes, that's hefty!\"), \"\\n\", React.createElement(_components.p, null, \"But wait, how can a single row be 1KB?\"), \"\\n\", React.createElement(_components.h2, null, \"The Initial Calculation\"), \"\\n\", React.createElement(_components.p, null, \"After some digging, I calculated the average row size:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"10 columns total\"), \"\\n\", React.createElement(_components.li, null, \"1 bigint (8 bytes)\"), \"\\n\", React.createElement(_components.li, null, \"3 integers (12 bytes)\"), \"\\n\", React.createElement(_components.li, null, \"5 timestamps (40 bytes)\"), \"\\n\", React.createElement(_components.li, null, \"1 int[] (assuming an average of 5 ints, 20 bytes)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Total estimated row size: 80 bytes.\")), \"\\n\", React.createElement(_components.p, null, \"For two years, that's 146,000,000 rows √ó 80 bytes/row = \", React.createElement(_components.strong, null, \"11.68 GB\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"12 GB? Sweet! I got the green light to onboard to PostgreSQL, and my app went live.\"), \"\\n\", React.createElement(_components.h2, null, \"Reality Check\"), \"\\n\", React.createElement(_components.p, null, \"But was I right? After all, I'm a rookie, and it's just me and AI‚Äîa perfect evil combo, right? ü§£\"), \"\\n\", React.createElement(_components.p, null, \"While I wasn't too far off, I revisited the week's data.\"), \"\\n\", React.createElement(_components.p, null, \"The current DB size as I write this is \", React.createElement(_components.strong, null, \"780 MB\"), \" for \", React.createElement(_components.strong, null, \"5,056,637 rows\"), \" (I haven't hydrated the historical data yet). That doesn't add up‚Äî5,056,637 rows √ó 80 bytes should be 404 MB. Why am I off by almost 380 MB, nearly 50% more?\"), \"\\n\", React.createElement(_components.h2, null, \"The Missing Pieces\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Surprise!\"), \" The index size is 162 MB, which I didn't factor in. But there are still 220 MB unaccounted for.\"), \"\\n\", React.createElement(_components.p, null, \"Ah, the average row size turned out to be \", React.createElement(_components.strong, null, \"130 bytes\"), \". I also overlooked row overhead (fields reserved for transaction management, tuple headers, TOAST), which is a minimum of 30 bytes.\"), \"\\n\", React.createElement(_components.h2, null, \"The Corrected Calculation\"), \"\\n\", React.createElement(_components.p, null, \"Considering these factors, recalculating gives:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"146,000,000 rows √ó 130 bytes/row ‚âà \", React.createElement(_components.strong, null, \"20 GB\")), \"\\n\", React.createElement(_components.li, null, \"Plus 20% for indexes ‚âà \", React.createElement(_components.strong, null, \"24 GB\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"That's more than double my initial estimate.\"), \"\\n\", React.createElement(_components.h2, null, \"Lessons Learned\"), \"\\n\", React.createElement(_components.p, null, \"It's been a valuable learning experience for me, and I hope it is for you too.\"), \"\\n\", React.createElement(_components.p, null, \"These basics might just save you from a hefty AWS RDS bill someday.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Key takeaways:\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Always account for row overhead (minimum 30 bytes in PostgreSQL)\"), \"\\n\", React.createElement(_components.li, null, \"Don't forget about index storage requirements\"), \"\\n\", React.createElement(_components.li, null, \"Real-world row sizes are often larger than theoretical calculations\"), \"\\n\", React.createElement(_components.li, null, \"Test with actual data when possible\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Comments are most welcome! How do you estimate your DB size? üòÅ\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/fmarshooq/source/personal/fasilmarshooq.github.io/site/posts/db-size-estimation.mdx\";\nimport * as React from \"react\";\nimport {graphql} from \"gatsby\";\nimport * as postStyles from \"../components/styles/post.module.css\";\nimport PostLayout from \"../components/post-layout\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {InlineCode, CodeBlock} from \"../components/code-block\";\nimport Comments from \"../components/Comments/comments\";\nconst components = {\n  pre: CodeBlock,\n  code: InlineCode\n};\nconst BlogPostTemplate = ({data, location, children}) => {\n  const post = data.mdx;\n  const siteTitle = \"Fasil Marshooq\";\n  return React.createElement(PostLayout, {\n    location: location,\n    headerTitle: siteTitle,\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt,\n    date: post.frontmatter.date,\n    tags: post.frontmatter.tags\n  }, React.createElement(\"div\", {\n    className: postStyles.content,\n    id: \"md-content\",\n    itemProp: \"articleBody\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children), React.createElement(Comments)));\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query GetPost($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","blockquote","ul","li","strong","_provideComponents","components","React","wrapper","MDXLayout","pre","CodeBlock","code","InlineCode","BlogPostTemplate","_ref","data","location","children","post","mdx","PostLayout","headerTitle","title","frontmatter","description","excerpt","date","tags","className","postStyles","id","itemProp","MDXProvider","Comments","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}